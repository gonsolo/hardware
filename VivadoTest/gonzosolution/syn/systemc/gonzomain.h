// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _gonzomain_HH_
#define _gonzomain_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "gonzomain_add_32ns_32ns_32_2.h"

namespace ap_rtl {

struct gonzomain : public sc_module {
    // Port declarations 13
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<3> > output_M_instance_address0;
    sc_out< sc_logic > output_M_instance_ce0;
    sc_out< sc_logic > output_M_instance_we0;
    sc_out< sc_lv<32> > output_M_instance_d0;
    sc_out< sc_lv<3> > input_M_instance_address0;
    sc_out< sc_logic > input_M_instance_ce0;
    sc_in< sc_lv<32> > input_M_instance_q0;


    // Module declarations
    gonzomain(sc_module_name name);
    SC_HAS_PROCESS(gonzomain);

    ~gonzomain();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    gonzomain_add_32ns_32ns_32_2<1,2,32,32,32>* gonzomain_add_32ns_32ns_32_2_U0;
    sc_signal< sc_lv<6> > ap_CS_fsm;
    sc_signal< sc_logic > ap_sig_cseq_ST_st1_fsm_0;
    sc_signal< bool > ap_sig_bdd_22;
    sc_signal< sc_lv<4> > i_1_fu_65_p2;
    sc_signal< sc_lv<4> > i_1_reg_84;
    sc_signal< sc_logic > ap_sig_cseq_ST_st2_fsm_1;
    sc_signal< bool > ap_sig_bdd_49;
    sc_signal< sc_lv<64> > p_n_assign_fu_71_p1;
    sc_signal< sc_lv<64> > p_n_assign_reg_89;
    sc_signal< sc_lv<1> > exitcond_fu_59_p2;
    sc_signal< sc_lv<32> > input_M_instance_load_reg_99;
    sc_signal< sc_logic > ap_sig_cseq_ST_st3_fsm_2;
    sc_signal< bool > ap_sig_bdd_65;
    sc_signal< sc_lv<32> > grp_fu_76_p2;
    sc_signal< sc_lv<32> > tmp_reg_104;
    sc_signal< sc_logic > ap_sig_cseq_ST_st5_fsm_4;
    sc_signal< bool > ap_sig_bdd_74;
    sc_signal< sc_lv<4> > i_reg_48;
    sc_signal< sc_logic > ap_sig_cseq_ST_st6_fsm_5;
    sc_signal< bool > ap_sig_bdd_87;
    sc_signal< sc_logic > grp_fu_76_ce;
    sc_signal< sc_lv<6> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<6> ap_ST_st1_fsm_0;
    static const sc_lv<6> ap_ST_st2_fsm_1;
    static const sc_lv<6> ap_ST_st3_fsm_2;
    static const sc_lv<6> ap_ST_st4_fsm_3;
    static const sc_lv<6> ap_ST_st5_fsm_4;
    static const sc_lv<6> ap_ST_st6_fsm_5;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<4> ap_const_lv4_8;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<32> ap_const_lv32_3;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sig_bdd_22();
    void thread_ap_sig_bdd_49();
    void thread_ap_sig_bdd_65();
    void thread_ap_sig_bdd_74();
    void thread_ap_sig_bdd_87();
    void thread_ap_sig_cseq_ST_st1_fsm_0();
    void thread_ap_sig_cseq_ST_st2_fsm_1();
    void thread_ap_sig_cseq_ST_st3_fsm_2();
    void thread_ap_sig_cseq_ST_st5_fsm_4();
    void thread_ap_sig_cseq_ST_st6_fsm_5();
    void thread_exitcond_fu_59_p2();
    void thread_grp_fu_76_ce();
    void thread_i_1_fu_65_p2();
    void thread_input_M_instance_address0();
    void thread_input_M_instance_ce0();
    void thread_output_M_instance_address0();
    void thread_output_M_instance_ce0();
    void thread_output_M_instance_d0();
    void thread_output_M_instance_we0();
    void thread_p_n_assign_fu_71_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
