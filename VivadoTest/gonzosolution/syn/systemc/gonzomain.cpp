// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "gonzomain.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic gonzomain::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic gonzomain::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<6> gonzomain::ap_ST_st1_fsm_0 = "1";
const sc_lv<6> gonzomain::ap_ST_st2_fsm_1 = "10";
const sc_lv<6> gonzomain::ap_ST_st3_fsm_2 = "100";
const sc_lv<6> gonzomain::ap_ST_st4_fsm_3 = "1000";
const sc_lv<6> gonzomain::ap_ST_st5_fsm_4 = "10000";
const sc_lv<6> gonzomain::ap_ST_st6_fsm_5 = "100000";
const sc_lv<32> gonzomain::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> gonzomain::ap_const_lv1_1 = "1";
const sc_lv<32> gonzomain::ap_const_lv32_1 = "1";
const sc_lv<1> gonzomain::ap_const_lv1_0 = "0";
const sc_lv<32> gonzomain::ap_const_lv32_2 = "10";
const sc_lv<32> gonzomain::ap_const_lv32_4 = "100";
const sc_lv<4> gonzomain::ap_const_lv4_0 = "0000";
const sc_lv<32> gonzomain::ap_const_lv32_5 = "101";
const sc_lv<4> gonzomain::ap_const_lv4_8 = "1000";
const sc_lv<4> gonzomain::ap_const_lv4_1 = "1";
const sc_lv<32> gonzomain::ap_const_lv32_3 = "11";

gonzomain::gonzomain(sc_module_name name) : sc_module(name), mVcdFile(0) {
    gonzomain_add_32ns_32ns_32_2_U0 = new gonzomain_add_32ns_32ns_32_2<1,2,32,32,32>("gonzomain_add_32ns_32ns_32_2_U0");
    gonzomain_add_32ns_32ns_32_2_U0->clk(ap_clk);
    gonzomain_add_32ns_32ns_32_2_U0->reset(ap_rst);
    gonzomain_add_32ns_32ns_32_2_U0->din0(input_M_instance_load_reg_99);
    gonzomain_add_32ns_32ns_32_2_U0->din1(ap_const_lv32_3);
    gonzomain_add_32ns_32ns_32_2_U0->ce(grp_fu_76_ce);
    gonzomain_add_32ns_32ns_32_2_U0->dout(grp_fu_76_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond_fu_59_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond_fu_59_p2 );

    SC_METHOD(thread_ap_sig_bdd_22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_49);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_65);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_74);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_87);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_bdd_22 );

    SC_METHOD(thread_ap_sig_cseq_ST_st2_fsm_1);
    sensitive << ( ap_sig_bdd_49 );

    SC_METHOD(thread_ap_sig_cseq_ST_st3_fsm_2);
    sensitive << ( ap_sig_bdd_65 );

    SC_METHOD(thread_ap_sig_cseq_ST_st5_fsm_4);
    sensitive << ( ap_sig_bdd_74 );

    SC_METHOD(thread_ap_sig_cseq_ST_st6_fsm_5);
    sensitive << ( ap_sig_bdd_87 );

    SC_METHOD(thread_exitcond_fu_59_p2);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( i_reg_48 );

    SC_METHOD(thread_grp_fu_76_ce);

    SC_METHOD(thread_i_1_fu_65_p2);
    sensitive << ( i_reg_48 );

    SC_METHOD(thread_input_M_instance_address0);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( p_n_assign_fu_71_p1 );

    SC_METHOD(thread_input_M_instance_ce0);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );

    SC_METHOD(thread_output_M_instance_address0);
    sensitive << ( p_n_assign_reg_89 );
    sensitive << ( ap_sig_cseq_ST_st6_fsm_5 );

    SC_METHOD(thread_output_M_instance_ce0);
    sensitive << ( ap_sig_cseq_ST_st6_fsm_5 );

    SC_METHOD(thread_output_M_instance_d0);
    sensitive << ( tmp_reg_104 );
    sensitive << ( ap_sig_cseq_ST_st6_fsm_5 );

    SC_METHOD(thread_output_M_instance_we0);
    sensitive << ( ap_sig_cseq_ST_st6_fsm_5 );

    SC_METHOD(thread_p_n_assign_fu_71_p1);
    sensitive << ( i_reg_48 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond_fu_59_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "gonzomain_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, output_M_instance_address0, "(port)output_M_instance_address0");
    sc_trace(mVcdFile, output_M_instance_ce0, "(port)output_M_instance_ce0");
    sc_trace(mVcdFile, output_M_instance_we0, "(port)output_M_instance_we0");
    sc_trace(mVcdFile, output_M_instance_d0, "(port)output_M_instance_d0");
    sc_trace(mVcdFile, input_M_instance_address0, "(port)input_M_instance_address0");
    sc_trace(mVcdFile, input_M_instance_ce0, "(port)input_M_instance_ce0");
    sc_trace(mVcdFile, input_M_instance_q0, "(port)input_M_instance_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_bdd_22, "ap_sig_bdd_22");
    sc_trace(mVcdFile, i_1_fu_65_p2, "i_1_fu_65_p2");
    sc_trace(mVcdFile, i_1_reg_84, "i_1_reg_84");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st2_fsm_1, "ap_sig_cseq_ST_st2_fsm_1");
    sc_trace(mVcdFile, ap_sig_bdd_49, "ap_sig_bdd_49");
    sc_trace(mVcdFile, p_n_assign_fu_71_p1, "p_n_assign_fu_71_p1");
    sc_trace(mVcdFile, p_n_assign_reg_89, "p_n_assign_reg_89");
    sc_trace(mVcdFile, exitcond_fu_59_p2, "exitcond_fu_59_p2");
    sc_trace(mVcdFile, input_M_instance_load_reg_99, "input_M_instance_load_reg_99");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st3_fsm_2, "ap_sig_cseq_ST_st3_fsm_2");
    sc_trace(mVcdFile, ap_sig_bdd_65, "ap_sig_bdd_65");
    sc_trace(mVcdFile, grp_fu_76_p2, "grp_fu_76_p2");
    sc_trace(mVcdFile, tmp_reg_104, "tmp_reg_104");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st5_fsm_4, "ap_sig_cseq_ST_st5_fsm_4");
    sc_trace(mVcdFile, ap_sig_bdd_74, "ap_sig_bdd_74");
    sc_trace(mVcdFile, i_reg_48, "i_reg_48");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st6_fsm_5, "ap_sig_cseq_ST_st6_fsm_5");
    sc_trace(mVcdFile, ap_sig_bdd_87, "ap_sig_bdd_87");
    sc_trace(mVcdFile, grp_fu_76_ce, "grp_fu_76_ce");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("gonzomain.hdltvin.dat");
    mHdltvoutHandle.open("gonzomain.hdltvout.dat");
}

gonzomain::~gonzomain() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete gonzomain_add_32ns_32ns_32_2_U0;
}

void gonzomain::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read())) {
        i_reg_48 = i_1_reg_84.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        i_reg_48 = ap_const_lv4_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read())) {
        i_1_reg_84 = i_1_fu_65_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        input_M_instance_load_reg_99 = input_M_instance_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && esl_seteq<1,1,1>(exitcond_fu_59_p2.read(), ap_const_lv1_0))) {
        p_n_assign_reg_89 = p_n_assign_fu_71_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read())) {
        tmp_reg_104 = grp_fu_76_p2.read();
    }
}

void gonzomain::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         !esl_seteq<1,1,1>(exitcond_fu_59_p2.read(), ap_const_lv1_0))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void gonzomain::thread_ap_idle() {
    if ((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void gonzomain::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         !esl_seteq<1,1,1>(exitcond_fu_59_p2.read(), ap_const_lv1_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void gonzomain::thread_ap_sig_bdd_22() {
    ap_sig_bdd_22 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void gonzomain::thread_ap_sig_bdd_49() {
    ap_sig_bdd_49 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(1, 1));
}

void gonzomain::thread_ap_sig_bdd_65() {
    ap_sig_bdd_65 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(2, 2));
}

void gonzomain::thread_ap_sig_bdd_74() {
    ap_sig_bdd_74 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(4, 4));
}

void gonzomain::thread_ap_sig_bdd_87() {
    ap_sig_bdd_87 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(5, 5));
}

void gonzomain::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_bdd_22.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void gonzomain::thread_ap_sig_cseq_ST_st2_fsm_1() {
    if (ap_sig_bdd_49.read()) {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    }
}

void gonzomain::thread_ap_sig_cseq_ST_st3_fsm_2() {
    if (ap_sig_bdd_65.read()) {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    }
}

void gonzomain::thread_ap_sig_cseq_ST_st5_fsm_4() {
    if (ap_sig_bdd_74.read()) {
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    }
}

void gonzomain::thread_ap_sig_cseq_ST_st6_fsm_5() {
    if (ap_sig_bdd_87.read()) {
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_0;
    }
}

void gonzomain::thread_exitcond_fu_59_p2() {
    exitcond_fu_59_p2 = (!i_reg_48.read().is_01() || !ap_const_lv4_8.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_48.read() == ap_const_lv4_8);
}

void gonzomain::thread_grp_fu_76_ce() {
    grp_fu_76_ce = ap_const_logic_1;
}

void gonzomain::thread_i_1_fu_65_p2() {
    i_1_fu_65_p2 = (!i_reg_48.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(i_reg_48.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void gonzomain::thread_input_M_instance_address0() {
    input_M_instance_address0 =  (sc_lv<3>) (p_n_assign_fu_71_p1.read());
}

void gonzomain::thread_input_M_instance_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read())) {
        input_M_instance_ce0 = ap_const_logic_1;
    } else {
        input_M_instance_ce0 = ap_const_logic_0;
    }
}

void gonzomain::thread_output_M_instance_address0() {
    output_M_instance_address0 =  (sc_lv<3>) (p_n_assign_reg_89.read());
}

void gonzomain::thread_output_M_instance_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read())) {
        output_M_instance_ce0 = ap_const_logic_1;
    } else {
        output_M_instance_ce0 = ap_const_logic_0;
    }
}

void gonzomain::thread_output_M_instance_d0() {
    output_M_instance_d0 = tmp_reg_104.read();
}

void gonzomain::thread_output_M_instance_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read()))) {
        output_M_instance_we0 = ap_const_logic_1;
    } else {
        output_M_instance_we0 = ap_const_logic_0;
    }
}

void gonzomain::thread_p_n_assign_fu_71_p1() {
    p_n_assign_fu_71_p1 = esl_zext<64,4>(i_reg_48.read());
}

void gonzomain::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 2 : 
            if (!esl_seteq<1,1,1>(exitcond_fu_59_p2.read(), ap_const_lv1_0)) {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            } else {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_st4_fsm_3;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_st5_fsm_4;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_st6_fsm_5;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_st2_fsm_1;
            break;
        default : 
            ap_NS_fsm = "XXXXXX";
            break;
    }
}

void gonzomain::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_M_instance_address0\" :  \"" << output_M_instance_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_M_instance_ce0\" :  \"" << output_M_instance_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_M_instance_we0\" :  \"" << output_M_instance_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_M_instance_d0\" :  \"" << output_M_instance_d0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"input_M_instance_address0\" :  \"" << input_M_instance_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"input_M_instance_ce0\" :  \"" << input_M_instance_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_M_instance_q0\" :  \"" << input_M_instance_q0.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

